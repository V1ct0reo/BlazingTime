@page "/timeentriestable"
@using BlazingTime.Shared
@using BlazingTime.Shared.Interfaces
@inject ITimeEntryFetcher TimeEntryFetcher

<h3>TimeEntriesTablePage</h3>

<button @onclick="LoadData">Load Time Entries</button>
<button @onclick="LogTest">Log-test</button>

@if (timeEntries != null)
{
    <ul>
        @foreach (var entry in timeEntries)
        {
            <li>@entry.Description (@entry.Start.ToShortDateString())</li>
        }
    </ul>
}

@if (timeEntries != null)
{
    <table>
        <thead>
            <tr>
                <th>ID</th>
                <th>Description</th>

            </tr>
        </thead>
        <tbody>
            @foreach (var e in timeEntries)
            {
                <tr>
                    <td>@e.Id</td>
                    <td>@e.Description</td>
                </tr>
            }
        </tbody>
    </table>
    <ul>
        @foreach (var entry in timeEntries)
        {
            <li>@entry.Description (@entry.Start.ToShortDateString())</li>
        }
    </ul>
}


@code {
    private IEnumerable<TimeEntryDto> timeEntries;

    protected override async Task OnInitializedAsync()
    {
        Console.WriteLine("on initialize");
    }

    async Task LoadData()
    {
        Console.WriteLine($"Fetching entries");
        timeEntries = await TimeEntryFetcher.FetchTimeEntriesAsync(DateTime.Now.AddDays(-7), DateTime.Now);
        Console.WriteLine($"Fetched {timeEntries.Count()} entries");
    }

    void LogTest()
    {
        Console.WriteLine("LOGTEST");
    }


}
